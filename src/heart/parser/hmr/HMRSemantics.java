//=========================================================================
//
//  This skeleton was generated by Mouse 1.6.1 at 2014-10-24 13:58:35 GMT
//  from grammar
//    '/Users/msl/Documents/AGH/heart/heartdroid/hmr_parser_generator/HMRGr
//    ammar.peg'.
//
//=========================================================================

package heart.parser.hmr;

import heart.alsvfd.Formulae;
import heart.alsvfd.Range;
import heart.alsvfd.SetValue;
import heart.alsvfd.SimpleNumeric;
import heart.alsvfd.SimpleSymbolic;
import heart.alsvfd.Value;
import heart.alsvfd.expressions.*;
import heart.alsvfd.expressions.BinaryExpression.BinaryOperator;
import heart.exceptions.BuilderException;
import heart.exceptions.ModelBuildingException;
import heart.exceptions.ParsingSyntaxException;
import heart.exceptions.RangeFormatException;
import heart.xtt.Attribute;
import heart.xtt.Decision;
import heart.xtt.Rule;
import heart.xtt.Table;
import heart.xtt.Type;
import heart.xtt.XTTModel;
import static heart.xtt.XTTModel.SOURCE_HMR;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;

class HMRSemantics extends heart.parser.hmr.runtime.SemanticsBase
{   
    private final String SKIP_VALUE = "SKIP";
    private final String SYNTAX_TAG = "SYNTAX ERROR";
    private final String SEMANTIC_TAG = "SEMANTIC ERROR";
    private final XTTModel.Builder modelBuilder;
    private Type.Builder _currentType;
    private Attribute.Builder _currentAttribute;
    private Table.Builder _currentTable;
    private Rule.Builder _currentRule;
    private String _error;
    
    public HMRSemantics() {
        this.modelBuilder = new XTTModel.Builder();
        this.modelBuilder.setSource(SOURCE_HMR);
    }
    
    private Type.Builder currentType() {
        if (_currentType == null) {
            _currentType = new Type.Builder();
        }
        return _currentType;
    }
    
    private Attribute.Builder currentAttribute() {
        if (_currentAttribute == null) {
            _currentAttribute = new Attribute.Builder();
        }
        return _currentAttribute;
    }
    
    private Table.Builder currentTable() {
        if (_currentTable == null) {
            _currentTable = new Table.Builder();
        }
        return _currentTable;
    }
    
    private Rule.Builder currentRule() {
        if (_currentRule == null) {
            _currentRule = new Rule.Builder();
        }
        return _currentRule;
    }
  
    public XTTModel getModel() throws ModelBuildingException {
        return this.modelBuilder.build();
    } 
  
    public void throwSyntaxError() throws ParsingSyntaxException {
        if (_error != null) throw new ParsingSyntaxException(_error);
    }
    
    private void accumulateError(String tag, String error) {
        if (_error == null) {
            _error = "";
        } 
        _error += "\n>>> " + tag + ":\n" + error;
        lhs().errClear();
    }
    
    //-------------------------------------------------------------------
    //  failed HMRelement = BADelement
    //-------------------------------------------------------------------
    void spottedEOF() {
        lhs().errClear();
    }

    //-------------------------------------------------------------------
    //  DEPelement = ("xtraj" / "xtpgr" / "xatgr" / "xstat" / "xcall" /
    //    "xactn" / "xhalv") (String / Number / ^["."])* Dot
    //-------------------------------------------------------------------
    void deprecatedElement() {
        Logger.getLogger("HMR Parsing").log(Level.WARNING, lhs().where(0) + ": " + rhs(0).text() + " is deprecated.");
        lhs().errClear();
    }

    //-------------------------------------------------------------------
    //  failed HMRelement = HMRtype / HMRattr / HMRschm / HMRrule
    //-------------------------------------------------------------------
    void badElement() {
        accumulateError(SYNTAX_TAG, lhs().errMsg());
    }
  
  //-------------------------------------------------------------------
  //  HMRtype = "xtype" LSbracket HMRtypeElement (Comma
  //    HMRtypeElement)* RSbracket Dot
  //-------------------------------------------------------------------
    void addType() {
        try {
            _currentType.setDebugInfo(lhs().where(0));
            modelBuilder.addType(_currentType.build());
            _currentType = null;
        } catch (BuilderException | ModelBuildingException ex) {
            accumulateError(SEMANTIC_TAG, ex.getMessage());
        }
    }
  
  //-------------------------------------------------------------------
  //  HMRattr = "xattr" LSbracket HMRattrElement (Comma
  //    HMRattrElement)* RSbracket Dot
  //-------------------------------------------------------------------
    void addAttribute() {
        try {
            _currentAttribute.setDebugInfo(lhs().where(0));
            modelBuilder.addIncompleteAttribute(_currentAttribute);
            _currentAttribute = null;
        } catch (Exception ex) {
            accumulateError(SEMANTIC_TAG, ex.getMessage());
        }
    }
  
  //-------------------------------------------------------------------
  //  HMRschm = "xschm" Skip* HMRschmName (Slash HMRschmDesc)? Colon
  //    HMRschmConditions EQarrow HMRschmDecisions Skip* Dot
  //-------------------------------------------------------------------
    void addTable() {
        try {
            _currentTable.setDebugInfo(lhs().where(0));
            modelBuilder.addIncompleteTable(_currentTable);
            _currentTable = null;
        } catch (Exception ex) {
            accumulateError(SEMANTIC_TAG, ex.getMessage());
        }
    }
  
  //-------------------------------------------------------------------
  //  HMRrule = "xrule" Skip* HMRruleName Colon HMRruleConditionsList
  //    EQarrow HMRruleDecisionsList (STarrow HMRruleAction)? (Colon
  //    (HMRruleToken / HMRruleTokensList))? Dot
  //-------------------------------------------------------------------
    void addRule() {
        try {
            _currentRule.setDebugInfo(lhs().where(0));
            modelBuilder.addIncompleteRule(_currentRule);
            _currentRule = null;
        } catch (Exception ex) {
            accumulateError(SEMANTIC_TAG, ex.getMessage());
        }
    }
  
  //-------------------------------------------------------------------
  //  HMRtypeName = "name" Colon String
  //-------------------------------------------------------------------
    void buildTypeName() {
        currentType().setName((String)rhs(2).get());
    }
  
  //-------------------------------------------------------------------
  //  HMRtypeBase = "base" Colon ("numeric" / "symbolic")
  //-------------------------------------------------------------------
    void buildTypeBase() {
        currentType().setBase(rhs(2).text());
    }
  
  //-------------------------------------------------------------------
  //  HMRtypeDomain = "domain" Colon (NumericValuesList /
  //    DomainSymbolsList)
  //-------------------------------------------------------------------
    void buildTypeDomain() {
        currentType().setDomain((SetValue)rhs(2).get());
    }
  
  //-------------------------------------------------------------------
  //  HMRtypeLength = "length" Colon UInteger
  //-------------------------------------------------------------------
    void buildTypeLength() {
        currentType().setLength((Integer)rhs(2).get());
    }
  
  //-------------------------------------------------------------------
  //  HMRtypeOrdered = "ordered" Colon ("yes" / "no")
  //-------------------------------------------------------------------
    void buildTypeOrdered() {
        currentType().setOrdered(rhs(2).text());
    }
  
  //-------------------------------------------------------------------
  //  HMRtypeDesc = "desc" Colon String
  //-------------------------------------------------------------------
    void buildTypeDescription() {
        currentType().setDescription((String)rhs(2).get());
    }
    
  //-------------------------------------------------------------------
  //  HMRattrName = "name" Colon String
  //-------------------------------------------------------------------
    void buildAttrName() {
        currentAttribute().setName((String)rhs(2).get());
    }
  
  //-------------------------------------------------------------------
  //  HMRattrClass = "class" Colon ("simple" / "general")
  //-------------------------------------------------------------------
    void buildAttrClass() {
        currentAttribute().setXTTClass(rhs(2).text());
    }
  
  //-------------------------------------------------------------------
  //  HMRattrType = "type" Colon String
  //-------------------------------------------------------------------
    void buildAttrType() {
        currentAttribute().setTypeName((String)rhs(2).get());
    }
  
  //-------------------------------------------------------------------
  //  HMRattrComm = "comm" Colon ("out" / "inter" / "comm" / "in")
  //-------------------------------------------------------------------
    void buildAttrComm() {
        currentAttribute().setComm(rhs(2).text());
    }
  
  //-------------------------------------------------------------------
  //  HMRattrCallback = "callback" Colon Identifier
  //-------------------------------------------------------------------
    void buildAttrCallback() {
        currentAttribute().setComm((String)rhs(2).get());
    }
  
  //-------------------------------------------------------------------
  //  HMRattrAbbrev = "abbrev" Colon String
  //-------------------------------------------------------------------
    void buildAttrAbbreviation() {
        currentAttribute().setAbbreviation((String)rhs(2).get());
    }
  
  //-------------------------------------------------------------------
  //  HMRattrDesc = "desc" Colon String
  //-------------------------------------------------------------------
    void buildAttrDescription() {
        currentAttribute().setDescription((String)rhs(2).get());
    }
  
  //-------------------------------------------------------------------
  //  HMRschmName = String
  //-------------------------------------------------------------------
    void buildSchmName() {
        currentTable().setName((String)rhs(0).get());
    }
  
  //-------------------------------------------------------------------
  //  HMRschmDesc = String
  //-------------------------------------------------------------------
    void buildSchmDescription() {
        currentTable().setDescription((String)rhs(0).get());
    }
  
  //-------------------------------------------------------------------
  //  HMRschmConditions = StringsList
  //-------------------------------------------------------------------
    void buildSchmConditions() {
        currentTable().setConditionalAttributesNames((LinkedList<String>)rhs(0).get());
    }
  
  //-------------------------------------------------------------------
  //  HMRschmDecisions = StringsList
  //-------------------------------------------------------------------
    void buildSchmDecisions() {
        currentTable().setDecisiveAttributesNames((LinkedList<String>)rhs(0).get());
    }

  //-------------------------------------------------------------------
  //  HMRruleName = HMRruleId
  //-------------------------------------------------------------------
    void buildRuleName() {
        currentRule().setRuleId((Rule.Builder.IncompleteRuleId)rhs(0).get());
    }

  //-------------------------------------------------------------------
  //  HMRruleCondition = String HRCop
  //-------------------------------------------------------------------
    void buildRuleCondition() {
        Formulae.Builder fb = (Formulae.Builder)rhs(1).get();
        currentRule().addCondition(fb.setAttributeName((String)rhs(0).get()).setDebugInfo(lhs().where(0)));
    }

  //-------------------------------------------------------------------
  //  HRCop = Skip* ("eq" / "noteq" / "lte" / "lt" / "gte" / "gt" /
  //    "subset" / "supset" / "sim" / "notsim" / "in" / "notin") Skip*
  //    HRDexpression
  //-------------------------------------------------------------------
    void buildRuleConditionalStaticExpression() {
        Formulae.Builder fb = new Formulae.Builder();
        int i = 0;
        while (rhs(i).get() == SKIP_VALUE) i++;
        String opName = rhs(i++).text();
        fb.setOp(Formulae.ConditionalOperator.fromString(opName));
        while (rhs(i).get() == SKIP_VALUE) i++;
        fb.setValue((ExpressionBuilderInterface)rhs(i).get());
        lhs().put(fb);
    }
//
//  //-------------------------------------------------------------------
//  //  HRCop = Skip* ("eq" / "noteq") Skip* String
//  //-------------------------------------------------------------------
//    void buildRuleConditionalStringExpression() {
//        Formulae.Builder fb = new Formulae.Builder();
//        int i = 0;
//        while (rhs(i).get() == SKIP_VALUE) i++;
//        String opName = rhs(i++).text();
//        fb.setOp(Formulae.ConditionalOperator.fromString(opName));
//        while (rhs(i).get() == SKIP_VALUE) i++;
//        fb.setValue(new StringExpressionBuilder()
//                .setString((String)rhs(i).get())
//                .setDebugInfo(lhs().where(i)));
//        lhs().put(fb);
//    }
    
  //-------------------------------------------------------------------
  //  HMRruleDecision = String Skip* "set" Skip* HRDexpression
  //-------------------------------------------------------------------
    void buildRuleDecision() {
        String attName = (String)rhs(0).get();
        ExpressionBuilderInterface ef = (ExpressionBuilderInterface)rhs(rhsSize() - 1).get();
        Decision.Builder db = new Decision.Builder()
                .setAttributeName(attName)
                .setIncompleteDecision(ef)
                .setDebugInfo(String.format("%s set %s at %s", attName, rhs(rhsSize() - 1).text(), lhs().where(0)));
        currentRule().addDecision(db);
    }
  
  //-------------------------------------------------------------------
  //  HRDexpPrec0 = NumberValue
  //-------------------------------------------------------------------
    void buildValueExpression() {
        lhs().put((Value)rhs(0).get());
    }
  
    //-------------------------------------------------------------------
    //  HRDexpPrec0 = String
    //-------------------------------------------------------------------
    void buildStringExpression() {
        lhs().put(new StringExpressionBuilder().setString((String)rhs(0).get()).setDebugInfo(lhs().where(0)));
    }
  
  //-------------------------------------------------------------------
  //  HRDexpPrec0 = Lbracket HRDexpression Rbracket
  //-------------------------------------------------------------------
    void buildBrackettedExpression() {
        lhs().put(rhs(1).get());
    }
  
  //-------------------------------------------------------------------
  //  HRDexpPrec1 = HRDexpPrec0 (HRDopPrec1 HRDexpPrec0)*
  //  HRDexpPrec2 = HRDexpPrec1 (HRDopPrec2 HRDexpPrec1)*
  //  HRDexpPrec3 = HRDexpPrec2 (HRDopPrec3 HRDexpPrec2)*
  //-------------------------------------------------------------------
    void buildAssociativeExpression() {
       if (rhsSize() == 1) {
           lhs().put(rhs(0).get());
       }
       else {
           ExpressionBuilderInterface rhs = (ExpressionBuilderInterface)rhs(rhsSize() - 1).get();
           BinaryOperator op = (BinaryOperator)rhs(rhsSize() - 2).get();
           BinaryExpression.Builder parent = new BinaryExpression.Builder()
                   .setOperator(op)
                   .setRightSideBuilder(rhs);
           BinaryExpression.Builder root = parent;
//           System.out.println("ROOT >>> " + parent);
           for (int i = rhsSize() - 4; i > 0; i -= 2) {
               op = (BinaryExpression.BinaryOperator)rhs(i).get();
               rhs = (ExpressionBuilderInterface)rhs(i + 1).get();
               BinaryExpression.Builder child = new BinaryExpression.Builder()
                       .setOperator(op)
                       .setRightSideBuilder(rhs);
               parent.setLeftSideBuilder(child);
               parent = child;
//               System.out.println("ROOT >>> " + root);
           }
           ExpressionBuilderInterface lhs = (ExpressionBuilderInterface)rhs(0).get();
           parent.setLeftSideBuilder(lhs);
           lhs().put(root);
//           System.out.println("EXPR >>>" + rhsText(0, rhsSize()) + " >>> " + root);
       }
    }

  //-------------------------------------------------------------------
  //  HRDopPrec0arg1 = "dom" Lbracket String Rbracket
  //-------------------------------------------------------------------
    void buildDomainOperator() {
        lhs().put(new DomainExpression.Builder()
                .setAttributeName((String)rhs(2).get())
                .setDebugInfo(lhs().where(0)));

    }

  //-------------------------------------------------------------------
  //  HRDopPrec0arg1 = ("abs" / "cos" / "sin" / "tan" / "fac" / "log" /
  //    "setpower") Lbracket HRDexpression Rbracket
  //-------------------------------------------------------------------
    void buildUnaryExpression() {
        lhs().put(new UnaryExpression.Builder()
                .setOperator(UnaryExpression.UnaryOperator.fromString(rhs(0).text()))
                .setArgumentBuilder((ExpressionBuilderInterface)rhs(1).get())
                .setDebugInfo(lhs().where(0)));
    }
  
  //-------------------------------------------------------------------
  //  HRDopPrec0arg2 = ("complement" / "except" / "intersec" / "union")
  //    Lbracket (ValuesList / HRDexpression) Comma (ValuesList /
  //    HRDexpression) Rbracket
  //-------------------------------------------------------------------
    void buildBinaryExpression() {
        lhs().put(new BinaryExpression.Builder()
                .setOperator(BinaryOperator.fromString(rhs(0).text()))
                .setLeftSideBuilder((ExpressionBuilderInterface)rhs(2).get())
                .setRightSideBuilder((ExpressionBuilderInterface)rhs(4).get())
                .setDebugInfo(lhs().where(0)));
    }
  
  //-------------------------------------------------------------------
  //  HRDopPrec1 = Skip* "**" Skip*
  //  HRDopPrec2 = Skip* "*" Skip* / Skip* "/" Skip* / Skip* "mod"
  //    Skip*
  //  HRDopPrec3 = Skip* "+" Skip* / Skip* "-" Skip*
  //-------------------------------------------------------------------
    void buildOperator() {
        int i = 0;
        while (rhs(i).get() == SKIP_VALUE) i++;
        lhs().put(BinaryOperator.fromString(rhs(i).text()));
    }
  
  //-------------------------------------------------------------------
  //  HMRruleAction = IdentifiersList
  //-------------------------------------------------------------------
    void buildRuleActions() {
        currentRule().setActions((LinkedList<String>)rhs(0).get());
    }
  
  //-------------------------------------------------------------------
  //  HMRruleToken = HMRruleId / HMRRuleSchemeId
  //-------------------------------------------------------------------
    void buildRuleLink() {
        currentRule().addLink((Rule.Builder.IncompleteRuleId)rhs(0).get());
    }

    //-------------------------------------------------------------------
    //  HMRruleId = String "/" HMRruleIndex
    //-------------------------------------------------------------------
    void buildRuleId() {
        Rule.Builder.IncompleteRuleId id = new Rule.Builder.IncompleteRuleId();
        id.schemeName = (String)rhs(0).get();
        id.orderNumber = (Integer)rhs(2).get();
        lhs().put(id);
    }
  
  //-------------------------------------------------------------------
  //  HMRruleIndex = Integer
  //-------------------------------------------------------------------
    void buildRuleIndex() {
        lhs().put((Integer)rhs(0).get());
    }
    
  //-------------------------------------------------------------------
  //  HMRRuleSchemeId = String
  //-------------------------------------------------------------------
    void buildRuleSchemeId() {
        Rule.Builder.IncompleteRuleId id = new Rule.Builder.IncompleteRuleId();
        id.schemeName = (String)rhs(0).get();
        lhs().put(id);
    }
  
  //-------------------------------------------------------------------
  //  DomainSymbol = OrderedStringValue / StringValue
  //  HRDexpression = HRDexpPrec3
  //  HRDexpPrec0 = HRDopPrec0
  //  HRDopPrec0 = HRDopPrec0arg2
  //  ValuesList = NumericValuesList / SymbolicValuesList
  //  Value = NumberValue / StringValue
  //  NumericValue = NumberValuesRange / NumberValue
  //  SymbolicValue = StringValuesRange / StringValue
  //  String = QuotedString / NormalString
  //  NumberValue = FloatValue / IntegerValue
  //  Number = Float / Integer
  //  HMRruleIndex = String
  //-------------------------------------------------------------------
    void buildPassValue() {
        lhs().put(rhs(0).get());
    }
  
  //-------------------------------------------------------------------
  //  StringsList = LSbracket String (Comma String)* RSbracket
  //  IdentifiersList = LSbracket Identifier (Comma Identifier)*
  //    RSbracket
  //-------------------------------------------------------------------
    void buildList() {
        LinkedList<Object> list = new LinkedList<>();
        for (int i = 1; i < rhsSize(); i += 2) {
            list.add(rhs(i).get());
        }
        lhs().put(list);
    }

  //-------------------------------------------------------------------
  //  DomainSymbolsList = LSbracket DomainSymbol (Comma DomainSymbol)*
  //    RSbracket
  //  NumericValuesList = LSbracket NumericValue (Comma NumericValue)*
  //    RSbracket
  //  SymbolicValuesList = LSbracket SymbolicValue (Comma
  //    NumericValue)* RSbracket
  //-------------------------------------------------------------------
    void buildValuesList() {
        SetValue list = new SetValue();
        for (int i = 1; i < rhsSize(); i += 2) {
            list.appendValue((Value)rhs(i).get());
        }
        lhs().put(list);
    }
    
  //-------------------------------------------------------------------
  //  NumberValuesRange = NumberValue RangeOp NumberValue
  //  StringValuesRange = StringValue RangeOp StringValue
  //-------------------------------------------------------------------
    void buildValuesRange() {
        Value from = (Value)rhs(0).get();
        Value to = (Value)rhs(2).get();

        try {
            if (from instanceof SimpleSymbolic) {
                lhs().put(new Range((SimpleSymbolic)from, (SimpleSymbolic)to));
            }
            else {
                lhs().put(new Range((SimpleNumeric)from, (SimpleNumeric)to));
            }
        } catch (RangeFormatException ex) {
            accumulateError(SEMANTIC_TAG, ex.getMessage());
        }
    }
  
  //-------------------------------------------------------------------
  //  OrderedStringValue = String Slash UInteger
  //-------------------------------------------------------------------
    void buildOrderedStringValue() {
        String value = (String)rhs(0).get();
        Integer index = (Integer)rhs(2).get();
        lhs().put(new SimpleSymbolic(value, index));
    }
    
  //-------------------------------------------------------------------
  //  OrderedString = String Slash UInteger {buildOrderedString};
  //-------------------------------------------------------------------
    void buildOrderedString() {
        String value = (String)rhs(0).get();
        lhs().put(value.concat(rhs(1).text()).concat(rhs(2).text()));
    }
    
  //-------------------------------------------------------------------
  //  StringValue = String
  //-------------------------------------------------------------------
    void buildStringValue() {
        String value = (String)rhs(0).get();
        lhs().put(new SimpleSymbolic(value));
    }
  
  //-------------------------------------------------------------------
  //  QuotedString = "'" ^["'"]* "'"
  //  Identifier = "'" ([a-z] / [A-Z] / "_") ([a-z] / [A-Z] / "_" /
  //    [0-9])* "'"
  //-------------------------------------------------------------------
    void buildQuotedString() {
        lhs().put(rhsText(1, rhsSize() - 1));
    }
  
  //-------------------------------------------------------------------
  //  NormalString = [a-z] ([a-z] / [A-Z] / [0-9] / "_")*
  //-------------------------------------------------------------------
    void buildNormalString() {
        lhs().put(rhsText(0, rhsSize()));
    }
  
  //-------------------------------------------------------------------
  //  FloatValue = Float
  //-------------------------------------------------------------------
    void buildNumberFloatValue() {
        Double number = (Double)rhs(0).get();
        lhs().put(new SimpleNumeric(number));
    }
  
  //-------------------------------------------------------------------
  //  Float = ("-" White*)? UFloat
  //-------------------------------------------------------------------
    void buildSignedFloat() {
        Double number = (Double)rhs(rhsSize() - 1).get();
        if (rhsSize() > 1) {
            number = -number;
        }
        lhs().put(number);
    }
  
  //-------------------------------------------------------------------
  //  UFloat = [0-9]+ "." [0-9]+
  //-------------------------------------------------------------------
    void buildUnsignedFloat() {
        lhs().put(Double.valueOf(rhsText(0, rhsSize())));
    }
  
  //-------------------------------------------------------------------
  //  IntegerValue = Integer
  //-------------------------------------------------------------------
    void buildNumberIntValue() {
        Integer number = (Integer)rhs(0).get();
        lhs().put(new SimpleNumeric(number.doubleValue()));
    }
  
  //-------------------------------------------------------------------
  //  Integer = ("-" White*)? UInteger
  //-------------------------------------------------------------------
    void buildSignedInteger() {
        Integer number = (Integer)rhs(rhsSize() - 1).get();
        if (rhsSize() > 1) {
            number = -number;
        }
        lhs().put(number);
    }
  
  //-------------------------------------------------------------------
  //  UInteger = [0-9]+
  //-------------------------------------------------------------------
    void buildUnsignedInteger() {
        lhs().put(Integer.valueOf(rhsText(0, rhsSize())));
    }
  
  //-------------------------------------------------------------------
  //  Skip = Comment / Clause / White
  //-------------------------------------------------------------------
    void passSkip() {
        lhs().errClear();
        lhs().put(SKIP_VALUE);
    }
}
